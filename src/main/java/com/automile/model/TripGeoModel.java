/**
 * Automile API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 * <p>
 * OpenAPI spec version: v1
 * <p>
 * <p>
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.automile.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;
import org.joda.time.DateTime;

import java.util.Objects;


/**
 * TripGeoModel
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-03-11T22:20:35.822+02:00")
public class TripGeoModel {
    @SerializedName("RecordTimeStamp")
    private DateTime recordTimeStamp = null;

    @SerializedName("Latitude")
    private Double latitude = null;

    @SerializedName("Longitude")
    private Double longitude = null;

    @SerializedName("HeadingDegrees")
    private Integer headingDegrees = null;

    @SerializedName("NumberOfSatellites")
    private byte[] numberOfSatellites = null;

    @SerializedName("HDOP")
    private byte[] HDOP = null;

    public TripGeoModel recordTimeStamp(DateTime recordTimeStamp) {
        this.recordTimeStamp = recordTimeStamp;
        return this;
    }

    /**
     * Get recordTimeStamp
     * @return recordTimeStamp
     **/
    @ApiModelProperty(example = "null", value = "")
    public DateTime getRecordTimeStamp() {
        return recordTimeStamp;
    }

    public void setRecordTimeStamp(DateTime recordTimeStamp) {
        this.recordTimeStamp = recordTimeStamp;
    }

    public TripGeoModel latitude(Double latitude) {
        this.latitude = latitude;
        return this;
    }

    /**
     * Get latitude
     * @return latitude
     **/
    @ApiModelProperty(example = "null", value = "")
    public Double getLatitude() {
        return latitude;
    }

    public void setLatitude(Double latitude) {
        this.latitude = latitude;
    }

    public TripGeoModel longitude(Double longitude) {
        this.longitude = longitude;
        return this;
    }

    /**
     * Get longitude
     * @return longitude
     **/
    @ApiModelProperty(example = "null", value = "")
    public Double getLongitude() {
        return longitude;
    }

    public void setLongitude(Double longitude) {
        this.longitude = longitude;
    }

    public TripGeoModel headingDegrees(Integer headingDegrees) {
        this.headingDegrees = headingDegrees;
        return this;
    }

    /**
     * Get headingDegrees
     * @return headingDegrees
     **/
    @ApiModelProperty(example = "null", value = "")
    public Integer getHeadingDegrees() {
        return headingDegrees;
    }

    public void setHeadingDegrees(Integer headingDegrees) {
        this.headingDegrees = headingDegrees;
    }

    public TripGeoModel numberOfSatellites(byte[] numberOfSatellites) {
        this.numberOfSatellites = numberOfSatellites;
        return this;
    }

    /**
     * Get numberOfSatellites
     * @return numberOfSatellites
     **/
    @ApiModelProperty(example = "null", value = "")
    public byte[] getNumberOfSatellites() {
        return numberOfSatellites;
    }

    public void setNumberOfSatellites(byte[] numberOfSatellites) {
        this.numberOfSatellites = numberOfSatellites;
    }

    public TripGeoModel HDOP(byte[] HDOP) {
        this.HDOP = HDOP;
        return this;
    }

    /**
     * Get HDOP
     * @return HDOP
     **/
    @ApiModelProperty(example = "null", value = "")
    public byte[] getHDOP() {
        return HDOP;
    }

    public void setHDOP(byte[] HDOP) {
        this.HDOP = HDOP;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TripGeoModel tripGeoModel = (TripGeoModel) o;
        return Objects.equals(this.recordTimeStamp, tripGeoModel.recordTimeStamp) &&
                Objects.equals(this.latitude, tripGeoModel.latitude) &&
                Objects.equals(this.longitude, tripGeoModel.longitude) &&
                Objects.equals(this.headingDegrees, tripGeoModel.headingDegrees) &&
                Objects.equals(this.numberOfSatellites, tripGeoModel.numberOfSatellites) &&
                Objects.equals(this.HDOP, tripGeoModel.HDOP);
    }

    @Override
    public int hashCode() {
        return Objects.hash(recordTimeStamp, latitude, longitude, headingDegrees, numberOfSatellites, HDOP);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TripGeoModel {\n");

        sb.append("    recordTimeStamp: ").append(toIndentedString(recordTimeStamp)).append("\n");
        sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
        sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
        sb.append("    headingDegrees: ").append(toIndentedString(headingDegrees)).append("\n");
        sb.append("    numberOfSatellites: ").append(toIndentedString(numberOfSatellites)).append("\n");
        sb.append("    HDOP: ").append(toIndentedString(HDOP)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

